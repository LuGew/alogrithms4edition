# Red Black Tree 

## 2-3-4 Tree
    是一種允許一個節點多個鍵的平衡查找樹BST，
    借此來保持樹的完美平衡（從根節點到葉子節點的）。所謂完美平衡就是從根節點到
    葉子節點的每條路徑長度都是相等的。
允許每個節點有1，2或者3個鍵
* 2-節點：1個鍵，2個子節點
* 3-節點：2個鍵，3個子節點
* 4-節點：3個鍵，4個子節點

### 2-3-4樹的查找
* 和每個節點的鍵相比較
* 在每個節點内部尋找鍵
* 遞歸查找關聯的鏈接

### 2-3-4樹的插入
* 根據規則一直查到樹的底部
* 底部是2節點時：變成3節點
* 底部是3節點時：變成4節點
* 底部是4節點時：當前節點已經沒有空間了

自底向上（Bayer，1972）：
* 將中間鍵向父節點移動
* 另外兩個節點分裂成中間節點的子節點
* 新節點進入左子節點/右子節點
* 如果父節點是4節點，則重複上述過程。
* 繼續往上樹的根節點也需要分裂

自頂向下（Guibas-Sedgewick，1978）
* 在向下過程中分裂4節點
* 新節點插入底部

注：
1. 當前節點（自頂向下過程中的當前節點）在變換后一定不會是4節點（因爲如果是
4節點都已經被轉換了）。
2. 父節點是4節點，子節點又是4節點的情況不會出現。
3. 到達底部時，節點只能是2節點或者3節點。

複雜度分析：
* 最壞情況：lgN (全是2節點)
* 最好情況：log4N (全是4節點)
* 100萬個節點查詢10-20次
* 1億個節點查詢15-30次

分析：
直接實現234tree較複雜，而且需要維護多種節點類型，很麻煩。
* 向下過程中需要頻繁的比較
* 頻繁節點分裂
* 2節點轉換3節點，3節點轉換4節點

## Red-black trees （Guibas-Sedgewick,1978）
1. 將234樹表示為BST。
2. 使用内部紅邊表示3節點和4節點。

關鍵點：
* 簡化BST查找工作
* 比234樹（其他集中平衡查找樹）維護簡化不少。

## Left-leaning Red-black trees （Guibas-Sedgewick,1978）
1. 將234樹表示為BST。
2. 使用内部紅邊表示3節點和4節點。
3. 需要3節點必須是左傾的邊。

關鍵點：
* 簡化BST查找工作
* 比原來234樹更容易維護。
* 因此樹具備黑色完美平衡。

禁止：
* 右傾的3節點。
* 一行内有兩個紅色節點。




    
    